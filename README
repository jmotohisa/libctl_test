Strainge behavior
---

(1) 'bool1' is not defined at startup

$ ./test1                                                                           (git)-[master]
GNU Guile 2.2.4
Copyright (C) 1995-2017 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
test1> bool1
$1 = #<procedure 10a0b5540 at ice-9/eval.scm:333:13 (a)>

or if test1 is not initialized

$ ./test1 run.ctl                                                                   (git)-[master] Backtrace:
           5 (apply-smob/1 #<catch-closure 10b544080>)
In ice-9/eval.scm:
    619:8  4 (_ #(#(#<directory (guile-user) 10b530140>) "run.ctl"))
    619:8  3 (_ #(#(#(#<directory (guile-user) 10b530140>) "run?") ?))
In unknown file:
           2 (primitive-load "run.ctl")
In ice-9/eval.scm:
    619:8  1 (_ #(#(#<directory (guile-user) 10b530140>) ()))
In unknown file:
           0 (read-input-vars)

ERROR: In procedure read-input-vars:
Wrong type: #<procedure 10c045d80 at ice-9/eval.scm:333:13 (a)>


-------
(2) Class including boolean invokes error at definision in the non-intractive mode
(error is not invoked in the intractive mode.)

$ cat test1_test1.ctl                                                               (git)-[master]
(define bool3-test2
  (make bool3-type
        (bool1 false)
        (int1 2)
        (num1 10.0)))

$ ./test1
GNU Guile 2.2.4
Copyright (C) 1995-2017 Free Software Foundation, Inc.

Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
This program is free software, and you are welcome to redistribute it
under certain conditions; type `,show c' for details.

Enter `,help' for help.
test1> (define bool3-test1 (make bool3-type (bool1 true)))  
test1> bool3-test1
$1 = ((bool3-type) (int1 . 1) (num1 . 1.0) (bool1 . #t))
test1> (include "test1_test1.ctl")  ;; include some file
#<procedure 105397ba0 at ice-9/eval.scm:333:13 (a)>
#t
ERROR: Wrong type to apply: #t

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
test1> bool3-test1
$2 = ((bool3-type) (int1 . 1) (num1 . 1.0) (bool1 . #t))
test1> (define bool3-test1 (make bool3-type (bool1 true)))
ERROR: Wrong type to apply: #t

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
test1> bool3-test1
$3 = ((bool3-type) (int1 . 1) (num1 . 1.0) (bool1 . #t))
test1> bool3-test2
;;; <unknown-location>: warning: possibly unbound variable `bool3-test2'
ERROR: In procedure module-lookup: Unbound variable: bool3-test2

Entering a new prompt.  Type `,bt' for a backtrace or `,q' to continue.
test1> bool3
$4 = ((bool3-type) (int1 . 1) (num1 . 1.0) (bool1 . #f))
-----
Conclusion:
"bool1" should be defined as procedure to validate definition of bool3-type,
but it is read when running the progam but is not defined, so error is invoked

bool1 はbool3-typeを定義するためにprocedureでなければならない。
しかし、入力変数としても定義されているので、プログラムを走らるとbool1
を読みこもうとしてしまう。このため未定義になのでエラーが発生する。
逆に、bool1をsetしておくとプログラムを走らせる時には読み込みエラーは発
生しなくなるが、bool3を定義するために (bool1 hoge)とするとwrong type
to apply となってしまう。
